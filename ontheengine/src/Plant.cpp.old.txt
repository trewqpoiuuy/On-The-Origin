/*
 * Plant.cpp
 *
 *  Created on: Jan 2, 2014
 *      Author: theron
 */

#include "Plant.h"
#include <stdlib.h>
#include <stdio.h>

#include "primitives.h"

Plant::Plant() {
	// TODO Auto-generated constructor stub

}

void Plant::addnode(Resources resources, Data data, float jointxrel, float jointyrel, float jointzrel, Node* pnode) {
	Node node;
	printf("Internal Pointer: %p\n", &node );
	nodes.push_back(node);
	Node* nodep=&node;
	printf("Pointer in vector: %p\n", nodep );
	nodep->jointxrel = jointxrel;
	nodep->jointyrel = jointyrel;
	nodep->jointzrel = jointzrel;
	//nodep->pnode = pnode;
	nodep->resources = resources;
	nodep->data = data;

	if (pnode) {
		pnode->cnodes.push_back( nodep );
		printf("Pointer: %p\n", nodep );
		// pnode->cnodes is equivalent to
		// (*pnode).cnodes  (Dereferencing pointer and accessing attribute)
	}
}

void Plant::simulate() {
	int nnodes=nodes.size(); // Must get value before for loop so changes to not affect it
	for (int i=0; i<nnodes; i++) {
		Resources* resourcesp=&nodes[i].resources;
		Data* datap=&nodes[i].data;
		if (nodes[i].resources.biomass>5) {
			for (int n=0; n<datap->nbranches; n++) {
				float xoff=(((float)(rand()%10000))/10000)*datap->size/datap->bsratio;
				float yoff=(((float)(rand()%10000))/10000)*datap->size/datap->bsratio;
				float zoff=1*datap->size/datap->bsratio;
				Resources newresources;
				newresources.biomass=datap->size/datap->bsratio;
				resourcesp->biomass-=datap->size/datap->bsratio;
				Data newdata=*datap;
				newdata.size=datap->size/datap->bsratio;
				addnode(newresources, newdata, xoff, yoff, zoff, &nodes[i]);
			}

		}
	}
	printf("Node summary:\n");
	printf("%d nodes exist\n",nodes.size());
	for (unsigned int i=0; i<nodes.size(); i++) {
		Node node=nodes[i];
		printf("\tnode%d:\n",i);
		printf("\tbiomass=%f\n",node.resources.biomass);
	}
}

void Plant::drawCnodes(Node* nodep, float xoff, float yoff, float zoff) {
	drawSphere(nodep->jointxrel+xoff,nodep->jointyrel+yoff,nodep->jointzrel+zoff,nodep->data.size,3,5);
	for (unsigned int i=0; i<nodep->cnodes.size(); i++) {
		Node cnode=*(nodep->cnodes[i]);
		drawCnodes(&cnode, cnode.jointxrel+xoff, cnode.jointyrel+yoff, cnode.jointzrel+zoff);
	}
}

void Plant::draw() {
	/*for (unsigned int i=0; i<nodes.size(); i++) {
		Node node=nodes[i];
		drawSphere(node.jointxrel,node.jointyrel,node.jointzrel,node.data.size,3,5);
	}*/
	drawCnodes(&nodes[0],0,0,0);
}
